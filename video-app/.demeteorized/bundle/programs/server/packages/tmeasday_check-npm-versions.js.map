{"version":3,"sources":["meteor://ðŸ’»app/packages/tmeasday:check-npm-versions/check-npm-versions.js"],"names":["semver","_","compatibleVersionIsInstalled","name","range","installedVersion","require","version","satisfies","e","console","log","checkNpmVersions","packages","packageName","failures","forEach","failure","keys","length","errors","installed","requirement","push","qualifier","warn","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,CAAT,QAAkB,mBAAlB;;AAEA;AACA;AACA;AACA;AACA,IAAMC,+BAA+B,SAA/BA,4BAA+B,CAACC,IAAD,EAAOC,KAAP,EAAiB;AACpD,MAAI;AACF,QAAMC,mBAAmBC,QAAWH,IAAX,oBAAgCI,OAAzD;AACA,QAAIP,OAAOQ,SAAP,CAAiBH,gBAAjB,EAAmCD,KAAnC,CAAJ,EAA+C;AAC7C,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOC,gBAAP;AACD;AACF,GAPD,CAOE,OAAOI,CAAP,EAAU;AACVC,YAAQC,GAAR,CAAYF,CAAZ;AACA;AACA,WAAO,KAAP;AACD;AACF,CAbD;;AAeA,OAAO,IAAMG,mBAAmB,SAAnBA,gBAAmB,CAACC,QAAD,EAAWC,WAAX,EAA2B;AACzD,MAAMC,WAAW,EAAjB;AACAd,IAAEe,OAAF,CAAUH,QAAV,EAAoB,UAACT,KAAD,EAAQD,IAAR,EAAiB;AACnC,QAAMc,UAAUf,6BAA6BC,IAA7B,EAAmCC,KAAnC,CAAhB;AACA,QAAIa,YAAY,IAAhB,EAAsB;AACpBF,eAASZ,IAAT,IAAiBc,OAAjB;AACD;AACF,GALD;;AAOA,MAAIhB,EAAEiB,IAAF,CAAOH,QAAP,EAAiBI,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,MAAMC,SAAS,EAAf;AACAnB,IAAEe,OAAF,CAAUD,QAAV,EAAoB,UAACM,SAAD,EAAYlB,IAAZ,EAAqB;AACvC,QAAMmB,cAAiBnB,IAAjB,SAAyBU,SAASV,IAAT,CAA/B;;AAEA,QAAIkB,SAAJ,EAAe;AACbD,aAAOG,IAAP,SAAkBpB,IAAlB,SAA0BkB,SAA1B,oBAAkDC,WAAlD;AACD,KAFD,MAEO;AACLF,aAAOG,IAAP,SAAkBpB,IAAlB,SAA0BU,SAASV,IAAT,CAA1B;AACD;AACF,GARD;;AAUA,MAAMqB,YAAYV,wBAAsBA,WAAtB,UAAwC,EAA1D;AACAJ,UAAQe,IAAR,qCAA+CD,SAA/C,wBACAJ,OAAOM,IAAP,CAAY,IAAZ,CADA;AAMD,CA/BM,kG","file":"/packages/tmeasday_check-npm-versions.js","sourcesContent":["import semver from 'semver';\nimport { _ } from 'meteor/underscore';\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;  \n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    console.log(e)\n    // XXX I guess the only error here is that the module doesn't exist?\n    return false;\n  }\n};\n\nexport const checkNpmVersions = (packages, packageName) => {\n  const failures = {};\n  _.forEach(packages, (range, name) => {\n    const failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  const errors = [];\n  _.forEach(failures, (installed, name) => {\n    const requirement = `${name}@${packages[name]}`;\n\n    if (installed) {\n      errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n    } else {\n      errors.push(` - ${name}@${packages[name]} not installed.`);\n    }\n  });\n\n  const qualifier = packageName ? `(for ${packageName}) ` : '';\n  console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n${errors.join('\\n')}\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n`);\n};\n"]}